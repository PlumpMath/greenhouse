0.5.0 (10/12/2010)
    - first official release

0.5.1 (10/12/2010)
    - simple packaging fix

0.5.2 (10/25/2010)
    - fixes to emulation.patched
    - fixed a bug with timeouts in the poll-based poller where it used
      seconds where the poll syscall uses milliseconds, so it was
      blocking for 1/1000th of the requested time
    - fixed a bug where coroutines blocked on pool.Pool.get or
      pool.OrderedPool.get would remain blocked indefinitely if the pool
      was close()d.
    - fixed bugs with the cleanup of IO objects (sockets, files, pipes,
      etc)

0.6.0 (1/14/2011)
    - new backdoor module
        - backdoor.run_backdoor creates a small server that runs a
          python interpreter in any connections made to it
        - backdoor.backdoor_handler takes an already-connected socket
          and runs a python interpreter over it
    - some fixes to utils.Channel, and then promoted it to the global
      greenhouse namespace and added documentation.
    - there was a bug in re-starting pools, calling start() after a call
      to close() now works
    - fix to emulation.patched -- it only worked on pre-imported stdlib
      modules before
    - new things emulated:
        - select.select
        - select.poll
        - select.epoll
        - select.kqueue
    - new functions for sending an exception to another coroutine
        - scheduler.schedule_exception
        - scheduler.schedule_exception_in
        - scheduler.schedule_exception_at
        - and scheduler.end exits the targeted coroutine immediately
    - new function io.wait_fds blocks the current coroutine waiting
      directly on file descriptor integers
    - new function scheduler.handle_exception performs the same handling
      on the provided exception as if it were unhandled and ended the
      coroutine (using the registered handlers)
    - utils.Queue uses the Empty and Full exception classes from the
      stdlib Queue module, and the emulation doesn't patch them any more
